/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type AnnouncementStruct = {
  announcer: AddressLike;
  content: string;
  timestamp: BigNumberish;
  isActive: boolean;
};

export type AnnouncementStructOutput = [
  announcer: string,
  content: string,
  timestamp: bigint,
  isActive: boolean
] & {
  announcer: string;
  content: string;
  timestamp: bigint;
  isActive: boolean;
};

export interface AnnouncementsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "announcementCounter"
      | "announcements"
      | "createAnnouncement"
      | "deactivateAnnouncement"
      | "getActiveAnnouncements"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AnnouncementCreated"
      | "AnnouncementDeactivated"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "announcementCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "announcements",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAnnouncement",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateAnnouncement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveAnnouncements",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "announcementCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "announcements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAnnouncement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateAnnouncement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveAnnouncements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace AnnouncementCreatedEvent {
  export type InputTuple = [
    announcementId: BigNumberish,
    announcer: AddressLike,
    content: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    announcementId: bigint,
    announcer: string,
    content: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    announcementId: bigint;
    announcer: string;
    content: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AnnouncementDeactivatedEvent {
  export type InputTuple = [announcementId: BigNumberish];
  export type OutputTuple = [announcementId: bigint];
  export interface OutputObject {
    announcementId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Announcements extends BaseContract {
  connect(runner?: ContractRunner | null): Announcements;
  waitForDeployment(): Promise<this>;

  interface: AnnouncementsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  announcementCounter: TypedContractMethod<[], [bigint], "view">;

  announcements: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, boolean] & {
        announcer: string;
        content: string;
        timestamp: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  createAnnouncement: TypedContractMethod<
    [content: string],
    [void],
    "nonpayable"
  >;

  deactivateAnnouncement: TypedContractMethod<
    [announcementId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getActiveAnnouncements: TypedContractMethod<
    [],
    [AnnouncementStructOutput[]],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "announcementCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "announcements"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, boolean] & {
        announcer: string;
        content: string;
        timestamp: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createAnnouncement"
  ): TypedContractMethod<[content: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deactivateAnnouncement"
  ): TypedContractMethod<[announcementId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActiveAnnouncements"
  ): TypedContractMethod<[], [AnnouncementStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AnnouncementCreated"
  ): TypedContractEvent<
    AnnouncementCreatedEvent.InputTuple,
    AnnouncementCreatedEvent.OutputTuple,
    AnnouncementCreatedEvent.OutputObject
  >;
  getEvent(
    key: "AnnouncementDeactivated"
  ): TypedContractEvent<
    AnnouncementDeactivatedEvent.InputTuple,
    AnnouncementDeactivatedEvent.OutputTuple,
    AnnouncementDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "AnnouncementCreated(uint256,address,string,uint256)": TypedContractEvent<
      AnnouncementCreatedEvent.InputTuple,
      AnnouncementCreatedEvent.OutputTuple,
      AnnouncementCreatedEvent.OutputObject
    >;
    AnnouncementCreated: TypedContractEvent<
      AnnouncementCreatedEvent.InputTuple,
      AnnouncementCreatedEvent.OutputTuple,
      AnnouncementCreatedEvent.OutputObject
    >;

    "AnnouncementDeactivated(uint256)": TypedContractEvent<
      AnnouncementDeactivatedEvent.InputTuple,
      AnnouncementDeactivatedEvent.OutputTuple,
      AnnouncementDeactivatedEvent.OutputObject
    >;
    AnnouncementDeactivated: TypedContractEvent<
      AnnouncementDeactivatedEvent.InputTuple,
      AnnouncementDeactivatedEvent.OutputTuple,
      AnnouncementDeactivatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
