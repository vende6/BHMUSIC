import { ethers } from "hardhat";
import { Announcements, Announcements__factory } from "../typechain-types";
import announcementsArtifacts from "../contracts/evsd-announcements.json";
import { formatDate } from "../lib/utils";

// Funkcija za listanje svih aktivnih obave≈°tenja
async function listActiveAnnouncements(announcements: Announcements) {
  console.log("\n–ê–∫—Ç–∏–≤–Ω–∞ –æ–±–∞–≤–µ—à—Ç–µ—ö–∞:");
  console.log("---------------------------------------------");
  
  const activeAnnouncements = await announcements.getActiveAnnouncements();
  
  if (activeAnnouncements.length === 0) {
    console.log(" –ù–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∏—Ö –æ–±–∞–≤–µ—à—Ç–µ—ö–∞.");
    return;
  }
  
  for (let i = 0; i < activeAnnouncements.length; i++) {
    const { content, announcer, timestamp, isActive } = activeAnnouncements[i];
    const date = new Date(Number(timestamp) * 1000);
    
    console.log(`[${i + 1}] –û–¥: ${announcer}`);
    console.log(`    –î–∞—Ç—É–º: ${formatDate(date)}`);
    console.log(`    –°–∞–¥—Ä–∂–∞—ò: ${content}`);
    console.log(`    –°—Ç–∞—Ç—É—Å: ${isActive ? "–∞–∫—Ç–∏–≤–Ω–æ" : "–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ"}`);
    console.log("---------------------------------------------");
  }
}

// Funkcija za kreiranje novog obave≈°tenja
async function createNewAnnouncement(announcements: Announcements, content: string) {
  console.log(`\n –ö—Ä–µ–∏—Ä–∞—ö–µ –Ω–æ–≤–æ–≥ –æ–±–∞–≤–µ—à—Ç–µ—ö–∞: "${content}"`);
  
  try {
    const tx = await announcements.createAnnouncement(content);
    await tx.wait();
    console.log(" –û–±–∞–≤–µ—à—Ç–µ—ö–µ —ò–µ —É—Å–ø–µ—à–Ω–æ –∫—Ä–µ–∏—Ä–∞–Ω–æ!");
  } catch (error) {
    console.error("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∫—Ä–µ–∏—Ä–∞—ö—É –æ–±–∞–≤–µ—à—Ç–µ—ö–∞:", error);
  }
}

// Funkcija za deaktiviranje obave≈°tenja po indeksu
async function deactivateAnnouncementByIndex(announcements: Announcements, index: number) {
  console.log(`\nüóëÔ∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–∞—ö–µ –æ–±–∞–≤–µ—à—Ç–µ—ö–∞ —Å–∞ –∏–Ω–¥–µ–∫—Å–æ–º: ${index}`);
  
  try {
    // Ovde moramo dobiti stvarni ID obave≈°tenja
    // Po≈°to nemamo direktan pristup ID-u preko strukture, moramo ga dobiti indirektno
    
    // Prvo ƒáemo dobiti broj ukupnih obave≈°tenja
    const counter = await announcements.announcementCounter();
    
    // Sada prolazimo kroz obave≈°tenja i tra≈æimo aktivno obave≈°tenje sa tra≈æenim indeksom
    let currentActiveIndex = 0;
    let targetId = 0;
    
    for (let i = 1; i <= Number(counter); i++) {
      const announcement = await announcements.announcements(i);
      if (announcement.isActive) {
        if (currentActiveIndex === index) {
          targetId = i;
          break;
        }
        currentActiveIndex++;
      }
    }
    
    if (targetId === 0) {
      console.error(" –ù–µ–≤–∞–ª–∏–¥–∞–Ω –∏–Ω–¥–µ–∫—Å –æ–±–∞–≤–µ—à—Ç–µ—ö–∞!");
      return;
    }
    
    // Deaktiviramo obave≈°tenje
    console.log(`–î–µ–∞–∫—Ç–∏–≤–∏—Ä–∞—ö–µ –æ–±–∞–≤–µ—à—Ç–µ—ö–∞ —Å–∞ ID-–æ–º: ${targetId}`);
    const tx = await announcements.deactivateAnnouncement(targetId);
    await tx.wait();
    console.log("–û–±–∞–≤–µ—à—Ç–µ—ö–µ —ò–µ —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–∞–Ω–æ!");
  } catch (error) {
    console.error("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–∞—ö—É –æ–±–∞–≤–µ—à—Ç–µ—ö–∞:", error);
  }
}

async function main() {
  const [deployer] = await ethers.getSigners();
  
  console.log("–ü–æ–≤–µ–∑–∏–≤–∞—ö–µ —Å–∞ Announcements —É–≥–æ–≤–æ—Ä–æ–º...");
  const announcements = Announcements__factory.connect(
    announcementsArtifacts.address,
    deployer
  );
  
  console.log("–¢—Ä–µ–Ω—É—Ç–Ω–∏ –≤–ª–∞—Å–Ω–∏–∫:", await announcements.owner());
  console.log("–ü–æ–≤–µ–∑–∞–Ω–∏ –Ω–∞–ª–æ–≥:", await deployer.getAddress());
  
  // –ö–æ–º–∞–Ω–¥–∞ —Å–µ —á–∏—Ç–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω–∞—Ç–∞ –∫–æ–º–∞–Ω–¥–Ω–µ –ª–∏–Ω–∏—ò–µ
  const args = process.argv.slice(2);
  const command = args[0] || "list";
  
  switch (command) {
    case "list":
      await listActiveAnnouncements(announcements);
      break;
      
    case "create":
      const content = args[1];
      if (!content) {
        console.error(" –ú–æ—Ä–∞—Ç–µ –Ω–∞–≤–µ—Å—Ç–∏ —Å–∞–¥—Ä–∂–∞—ò –æ–±–∞–≤–µ—à—Ç–µ—ö–∞!");
        console.log("–ü—Ä–∏–º–µ—Ä: npx hardhat run scripts/manage-announcements.ts create \"–í–∞—à–µ –æ–±–∞–≤–µ—à—Ç–µ—ö–µ\"");
        process.exit(1);
      }
      await createNewAnnouncement(announcements, content);
      break;
      
    case "deactivate":
      const indexStr = args[1];
      if (!indexStr) {
        console.error(" –ú–æ—Ä–∞—Ç–µ –Ω–∞–≤–µ—Å—Ç–∏ –∏–Ω–¥–µ–∫—Å –æ–±–∞–≤–µ—à—Ç–µ—ö–∞ –∑–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–∞—ö–µ!");
        console.log("–ü—Ä–∏–º–µ—Ä: npx hardhat run scripts/manage-announcements.ts deactivate 1");
        process.exit(1);
      }
      const index = parseInt(indexStr) - 1; // –ö–æ—Ä–∏—Å–Ω–∏—Ü–∏ –ø–æ—á–∏—ö—É –±—Ä–æ—ò–∞—ö–µ –æ–¥ 1
      await deactivateAnnouncementByIndex(announcements, index);
      break;
      
    default:
      console.error(`–ù–µ–ø–æ–∑–Ω–∞—Ç–∞ –∫–æ–º–∞–Ω–¥–∞: ${command}`);
      console.log("–ü–æ–¥—Ä–∂–∞–Ω–µ –∫–æ–º–∞–Ω–¥–µ: list, create, deactivate");
      process.exit(1);
  }
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("–ì—Ä–µ—à–∫–∞:", error);
    process.exit(1);
  }); 